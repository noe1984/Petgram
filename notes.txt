CLONANDO REPOSITORIO
npm init -y


-----INSTALAR WEBPACK 
1-npm i webpack webpack-cli --save-dev

2-Crear carpeta src en raiz y dentro index.js

3-EMPAQUETAR EL ARCHIVO INDEX USANDO WEBPACK
    ./node_modules/.bin/webpack src/index.js   ó   npx webpack --entry ./src/index.js
    para ejecutarlo en consola   node dist/main.js

4-CREAMOS EN LA RAIZ DE NUESTRO PROYECTO:  webpack.config.js
    npm install html-webpack-plugin --save-dev

    const htmlWebpackPlugin = require('html-webpack-plugin')

    module.exports = {
        output: {
            filename: 'app.bundle.js'
        },
        plugins: [
            new htmlWebpackPlugin()
        ]
    }

5-AGREGANDO SCRIPTS
Agregar en scripts en package.json  "build": "webpack"  y este mirara por defecto en src
    ejecutar  npm run build

6-INSTALAR EL SERVIDOR DE DESARROLLO DE WEBPACK
    npm install webpack-dev-server --save-dev

7-AÑADIR NUEVO SCRIPT PARA LO ANTERIOR
    "dev": "webpack-dev-server" y lo ejecutamos npm run dev  
        *npm i webpack-cli@3 --save-dev   se instaló nueva version ya que la 4 mostraba error
        *nuevas versiones es el script "webpack serve",
        *devtool: 'source-map' , en webpack.config para la quitar advertencia en consola
 



----INSTALACION DE REACT Y BABEL
1- npm i react react-dom
2-En index.js importar los anteriores y renderizar, ejecutar servidor local
3-En src crear index.html y crear el div con el id 'app'
4-Para poder usar ese index.html en proyecto se le tiene que indicar al htmlWebpackPlugin que tiene que usar este
    template para generar el index.html.
    en webpack.config:

        new htmlWebpackPlugin({
            template: 'src/index.html'
        })

5-Para poder renderezar jsx se tendran que instalar dependencias de babel
    npm i @babel/core @babel/preset-env @babel/preset-react babel-loader --save-dev
    En webpack.config para usar el loader y los preset:

    module: {
        rules: [
            { 
                test: /\.js$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader',
                    options: {
                        presets: [
                            '@babel/preset-env', 
                            '@babel/preset-react'
                        ]
                    }
                }, 
            }
        ]
    }





---LINTER, EXTENSIONES Y DEPLOY CON NOW
1- npm i standard --save-dev y añadir script "lint": "standard"
2- Para que no haga linter de esos archivos y error añadir debajo de en el package.json dependencies:
      "standard": {
            "ignore": [
            "/api/**"
            ]
        }
3-En package.json añadir una nueva linea
    "eslintConfig": {
        "extends": ["./node_modules/standard/eslintrc.json"]
    }

ASEGURAR EL DEPLOY DE api, VERCEL
1-   Instalar vercel
    Si es necesario actualizar node:
    *sudo npm cache clean -f, sudo npm install -g n, sudo n stable (actualizar a la ultima version)

    sudo npm i -g vercel
    ejecutar vercel

    ? Which scope do you want to deploy to? [nick de vercel] (Presionan Enter)
    ? Link to existing project? [y/N] (Presionan n)
    ? What’s your project’s name? petgram-vercel (Presionan Enter)
    ? In which directory is your code located? ./ (Presionan Enter)

2- Hacer el archivo de configuracion de vercel en la raiz como vercel.json
    añadir script "vercel-build": "npm run build"

3-Ir a pagina de vercel en proyecto y settings
    Para el deploy en produccion debemos cambiar el output directory: 
    para ellos nos vamos a vercel, 
    buscamos el proyecto y luego en settings, 
    habilitamos el output directory y escribimos dist le damos en el botón SAVE.
    ejecutar vercel --prod en raiz de proyecto





                             COMPONENTS
                             
CREANDO LA INTERFAZ CON CON STYLED-COMPONENTS//////////

----CATEGORY, PRIMER COMPONENTE, STYLED-COMPONENTS
1-npm i styled-components
2-Crear en src App.js y renderizar en index.js

3-Crear carpeta components, dentro crear carpeta Category y dentro de esta index.js
    donde se hara el export de forma nombrada, que contiene el cover, path y emoji como parametros
    y devuelve un a con la img y el emoji, importarlo envuelto en llaves en App.js

4- Para trabajar los estilos crearemos siempre un archivo llamado styles.js
    import styled from 'styled-components'
    Usar styled y exportar las const que contienen el css e importarlos en index.js


HOOKS/////////////////////

-----LIST OF CATEGORIES
1-Nueva carpeta ListOfCategories y dentro index.js que develve componente Category, renderizarlo en App.js
2-Styes.js para dar estilos con styled-components a ul y li
3-GlobalStyles.js en src, importarlos en App.js para usarlos arriba de ListOfCategories
4-Traer categories de la api local y mapearlas en ListOfCategories y dentro en el componente Category
    pasar como prop con el rest o spread operator cada categoria.

-----PHOTOCARD, LIKE A FOTO
1-En components crear carpeta PhotoCard y dentro el index.js donde la funcion recibe como parametros
    likes y id, y contiene un article que tiene una a que conectara a {`/detail/${id} ademas de un button
    para los likes.
2-Usar este componente en App.js debajo de ListOfCategories y temporalmente usar una imagen en una const 
    de la db.json para mostrar. Crear styled.js
3- npm i react-icons
    para prop size='32px' usarlo en el button al lada de{likes}
    ainear el button
4-Crear carpeta ListOfPhotoCards dentro index.js y depues renderizarlo en App.js en vez de PhotoCard

-----LOGO PETGRAM 
1-Convertirlo en un componente de react con SVGR
2-Crear carpeta Logo en components dentro index.js y pegamos en el codigo generado por la pagina:
    https://react-svgr.com/playground/ hacer styles.js y usarlo en App.js.


-----ANIMACIONES CON KEYFRAMES, PHOTOCARD
1-Importar {keyframes} en styles.js y hacer const fadeInKeyFrames, para usasrlo en Img como:
    animation: 1s ${fadeInKeyFrames} ease;
2-Hacer reutilizable la anterior animacion, creamos carpeta styles en src y dentro animations.js
3-Mover GlobalStyles dentro de la carpeta styles y acutalizar el import donde corresponda

----USESTATE, USEEFFECT EN ListOfCategories
1-En ListOfCategories usar useState y cambiar el import de categories por 
    import {categories as mockCategories } from '../../../api/db.json'
2-Hacer fetch con useEffect
    'https://api-noe1984.vercel.app/categories', ahora categories estara en setState y eliminamos 
    la const de la base de datos local y el valor inicial del state sera un array vacio

----ListOfCategories FIXED
1-Crear funcion renderList que reutilizara la lista existente y renderizar la funcion en el return dos veces
    una con el parametro true
2-Añadir estilos a List cuando contenga la className 'fixed'
3-Hacer que la minilista aparezca solo a cierto nivel de scroll usando otro useEffect cuando el scroll > 200
4-Evitar que el document.addEventListener se siga escuchando o memory leak, con una funcion que devuelve un 
    removeEventListener y pasarle el segundo parametro a useEffect la dependencia showFixed.

----useCategoriesData, buenas practicas, loading
*buenas practicas: refactorizar en renderList en el if ternario, ahora fixed como prop y recibirlo en 
    styles.js y con una funcion devolver el css.
*refactorizar el fetch: Crear custom hook useCategoriesData fuera y empaquetar en esta funcion el fetching
    agregar estado de loading a esta funcion con useState, 
*hacer loading true justo antes del llamado y hacer
    loading false inmediatamente despues de llamado correcto, y devolverlo {loading} para que se pueda
    usar en ListOfCategories
*Hacer un if ternario en renderList si esta cargando que muestre el componente Loading y si ya no esta 
    cargando que muestre todas las categorias

-----PHOTOCARD, intersectionObserver, useEffect, useRef
1-En PhotoCard usar useRef en article
2-Con useEffect usar intersectionObserver y obsevar el elemento de ref
    de esto obtener const {isIntersecting} = entries[0]
3-con useState inicializar un estado show false
4-En el useEffect debajo del obsever hacer un if para que la propiedad isIntersecting se vuelva true con 
    setShow y desconectar el observador
5-condicional dentro de article si show mostrar contenido
6-En consola mostrara todos como intersectando valor true por que no se muestran al principio, entonces cambiar 
    el tamaño minimo de altura de cada elemento article a 200 o 300px.

------PHOTOCARD,POLYFILL PARA intersectionObserver
1-npm install intersection-observer
2-Usar esta dependencia en el useEffect por que es ahi donde damos por sentado que se soporta intersectionObserver
    pero no siempre es asi, lo vamos a cargar solo cuando lo necesitemos haciendo un import dinamico dentro del hook
    import('intersection-observer') que devuelve una promesa
3-Si el navegador ya soporta el intersectionObserver entonces no ejecutar el import dinamico, haremos un ternario para 
    solucionar esto, como devuelve una promesa haremos un promise.resolve

-----PHOTOCARD,LOCAL STORAGE ALMACENAR LIKES
1-inicializar un estado false con useState llamandolo liked
2-En button en onClick crear una funcion para modificar el estado al contrario del que se tiene en liked
3-crear una funcion de tipo componente que devuelve un tipo de corazon dependiendo del valor true o false de liked
    se obtiene el corazon relleno de 'react-icons/md' que se llama MdFavorite.
4-Hacer que el estado recuerde si se ha dado like o no, primero hacer una const setLocalStore con un try catch y aqui
    se usara el setState para cambiar el estado, usar esta funcion en el onClick.
5-Para que el valor almacenado se muestre no solo en consola se tiene que inicializar el estado pasandole un funcion
    con try catch a useState en el valor inicial, que obtendra el valor de setLocalStore y lo devolvera como state inicial
6-Para hacer un local storage correcto se pasara en el componente ListOfPhotoCards la prop id={id} a PhotoCard que 
    lo guardara como una const key, usar este valor para almacenar en el storage y en el state inicial
7-Agrupar esto en un custom hook llamado useLocalStorage que devolvera,  el estado y la funcion que modifica 
    el estado, en este caso el useState si hay un estado almacenado en localStorage devolvera el que se encuentre alli
    como valor inicial,
    y la funcion que modifica el estado tambien almacenara ese estado en la localStorage

    
                             
GRAPHQL Y REACT APOLLO///////////////////////

------CONECTANDO CON SERVIDOR DE APOLLO
1- En index.js principal

import ApolloClient from 'apollo-boost'
import { ApolloProvider } from '@apollo/react-hooks'

const client = new ApolloClient({
  uri: 'https://api-nine-gamma.vercel.app/graphql'
})

ReactDOM.render(
  // eslint-disable-next-line react/jsx-filename-extension
  <ApolloProvider client={client}>
    <App />
  </ApolloProvider>,
  document.getElementById('app')
)


2- En ListOfPhotoCards

const getPhotos = gql`
  query getPhotos {
    photos {
      id
      categoryId
      src
      likes
      userId
      liked
    }
  }
`
3-Exportar ListOfPhotoCards que contiene 
    const { loading, error, data } = useQuery(getPhotos)
    mapear photos que viene de data 
    pasasr key={id} {...photoCard} a componente PhotoCard


------PARAMETROS PARA UN QUERY CON graphql, FILTRAR POR CATEGORIAS 
1- Agregar

const getPhotos = gql`
  query getPhotos($categoryId: ID) {
    photos(categoryId: $categoryId) {
      id
      categoryId
      src
      likes
      userId
      liked
    }
  }
`

2-En ListOfPhotoCards
    Agregar const { loading, data, error } = useQuery(getPhotos, { variables: { categoryId } })
    categoryId como parametro que recibe la funcion y que sera definido en App.js

3- Separar el hoc en una carpeta en src con el nombre de useGetPhotos


--------RENDER PROPS
1-En PhotoCard cambiar la ruta del href <a href={`/?detail=${id}`}>
2-En App.js añadir llaves a la funcion para agregar la const urlParams y detailId
    const urlParams = new URLSearchParams(location.search)
    const detailId = urlParams.get('detail')
3-Si detailId es true renderizar un componente si no renderizar lo que ya se tenia 
4-Ver las fotos de forma separada: detalles
    El compoenente a renderizar es en src>containers PhotoCardWithQuery que devuelve PhotoCard
5-Crear la const query
6-refactorizar, en PhotoCardWithQuery la const en vez de query GET_SINGLE_PHOTO 
    y en hoc en vez de getPhotos GET_PHOTOS 


-------ENVIAR LIKES A BASE DE DATOS, MUTATION 
1-Crear en components> FavButton.js< index.js y llevar el boton de PhotoCard alli
2-recibira parametros de ({liked, likes, onClick})
3-Usar Button en PhotoCard y pasarle los parametros tambien onClick al cual se le pasara la funcion
    handelFavClick
4-Crear mutacion, En containers crear ToggleLikeMutation.js 
    const LIKE_PHOTO = gql`
    mutation likeAnonymousPhoto($input: LikePhoto!) {
        likeAnonymousPhoto(input: $input) {
        id,
        liked,
        likes
        }
    }
    `
export const ToggleLikeMutation = () => {
    const [mutation, mutationLoading, mutationError ] = useMutation(LIKE_PHOTO)
    return { mutation, mutationLoading, mutationError }
}
5-En PhotoCard importar el ToggleLikeMutation 
     const { mutationLoading, mutationError, mutation } = ToggleLikeMutation()

    const handleFavClick = () => {
        !liked && mutation({ variables: {input: { id }}
        })
        setLiked(!liked)
    }



REACH ROUTER//////////////////////

------RUTAS, VER CADA CATEGORIA POR CATEGORYID
1-Crear carpeta src>pages y Home.js y cortar App.js el Fragment que contiene ListOfCategories y ListOfPhotoCards
    e importarlo en App.js
2- npm install @reach/router  e importarlo en App.js import {Router} from '@reach/router'
3-Envolver con Router a Home que tiene path='/' y a <Home path='/pet/:id' />
4-Buscar donde estan los enlaces de la categorias que es en ListOfCategories que renderiza Category aqui 
    agregamos el  path={`/pet/${category.id}`} 
5-Esto arrojara un error 404 de la configuracion de webpack, se puede resolver de 2 maneras
    -En package.json agregar en dev el flag --history-api-fallback" , para que en caso de 404 haga un fallback a
    index.html.
    
    - ó En webpack
        devServer: {
            historyApiFallback: {
            disableDotRule: true
            },
            liveReload: true
        },

6-Agregar en webpack publicPath: '/' para que sea en esta ruta donde va a encontrar el bundle.js

------LINK EN CATEGORYID Y LOGO, EVITAR RECARGAR PAGINA AL ELEGIR UNA CATEGORIA
1- En Category> styles.js import { Link } from '@reach/router' y pasarselo como parametro a styled
    el cual aceptara un componente que acepte la prop className y Link lo aceptara

2-En Category> index.js en el Anchor ahora es to={path} y en los parametros recibidos de ser necesario
    inicializar el path=#
3-Mejorar codigo,en index.js cambiar nombre de Anchor a Link en index.js y en styles 
    import { Link as LinkRouter} from '@reach/router'
    export const Link = styled(LinkRouter)`
4-* Agregar Link en Logo, en index.js import { Link } from '@reach/router'
    Envolver el svg con Link el cual va a redirigir al Home '/'


-------DETAIL, INCORPORARLO A ROUTE
1-En pages crear Detail.js el cual devolvera el compoenente PhotoCardWithQuery
    Ahora el detailId se recibira por props 
2-se borrara este bloque:
  const urlParams = new URLSearchParams(location.search)
  const detailId = urlParams.get('detail')
  console.log(detailId)
3-Se renderizara el Router debajo del logo y se elimina la ternaria
4-Renderizar dentro del Router el Detail y pasarle el path='/detail/:detailId'
5-En Photocard que es donde se define el enlace ahora yan no sera un anchor sino un
    Link to={`/detail/${id}`}


-------NAVBAR
1-En components crear carpeta NavBar que devuelve 3 buttons, usarlo debajo de Router
2-Crear archivo styles.js y exportar Nav y Link, usarlos en el index y pasar los siguientes paths
    <Nav>
        <Link to='/'><MdHome size={SIZE}/></Link>
        <Link to='favs'><MdFavoriteBorder size={SIZE} /></Link>
        <Link to='/user'><MdPersonOutline size={SIZE} /></Link>
    </Nav>
3-Pasarle un size de 32 px a los componentes de iconos
4-En styles.js agregar, si el componente padre tiene un atributo agregar cierto estilo
    *@reach/router marca las rutas que estan siendo activas con el atributo aria-current
    &[aria-current] {
        color: #000;
    }
5-añadir un pseudoelemento
        &:after {
            content: '·';
            position: absolute;
            bottom: 0;
            font-size: 34px;
            line-height: 20px;
        }

6-añadir el fadeIn de animation.js dentro del pseudoelemento para que solo ocurra en el puntito
    ${fadeIn({time: '.5s'})}


-----RUTAS PROTEGIDAS, 
1-En pages crear Favs.js y User.js y NotRegisteredUser.js que por ahora solo renderizan sus nombres
2-Usar estas pages en el App.js y al NotRegisteredUser añadir los siguientes path
    <NotRegisteredUser path='/favs' />
    <NotRegisteredUser path='/user' />
3-Hacer que si esta registrado vea unas rutas y si no lo esta que vea otras.
4-Crear funcion del tipo render Props como sigue 
    const UserLogged = ({children}) => {
        return children({isAuth: false})
    }
5-En Router poner las rutas anteriormente creadas dentro de UserLogged que seran devueltas por una funcion
    dependiendo si el valor isAuth es true o false usando un ternario
    Si isAuth es true devolvera un Router donde tendra acceso a 
        <Favs path='/favs' />
        <User path='/user' />
    Si isAuth es false
        <NotRegisteredUser path='/favs' />
        <NotRegisteredUser path='/user' />



GESTION DE USUARIOS///////////////////////

-----INTRODUCCION A REACT.CONTEXT, AUTENTICACION REGISTRADO O NO
*Saber desde cualquier punto de la aplicacion si el usuario esta autentificado o no
*Context ofrece dos caracteristicas Provider y Consumer

1-En src>Context.js crear la const Context y export default
2-En index.js envolver la app con el Context.Provider y pasarle el value = {isAuth}
3-En App.js ya no necesitamos la funcion UserLogged ahora usar Context.Consumer 
4-Cambiar el valor de forma dinamica, en context crear la const Provider
    recibe parametro children
    crea const value que que tiene dos valores isAuth y una funcion que hace setIsAuth
    retorna Context.Provider con el value anterior y el objeto children
    hacer un export default de 
5-En NotRegisteredUser hacer proporcione una forma de autentificar al usuario 
    usar el Consumer que renderiza una funcion al estilo render props y retorna un forma
    con el onSubmit que ejecuta la funcion activateAuth.

------FORMULARIO, useInputValue, styles
1- En components>UserForm>index.js, crear la funcion UserForm que retornara el formulario 
    con input de email y password
2-El value y el onChange se obtendran de un estado local usando useState, valor inicial ''
3-El value vendra del estado y el onChange de una funcion que cambia estado
4-simplificar los inputs con un custom hook llamado useInputValue el cual usa useState
    y devuelve value y onChange
6-Usarlos en los input con el spread operator 
7-Crear archivo styles.js que contiene Form, Input, Button y Title

------MUTACIONES PARA REGISTRO, ERROR, LOADING, DISABLED PROP
1-Crear container>RegisterMutation.js
2- Hacer
    const REGISTER = gql`
        mutation signup($input: UserCredentials!){
            signup(input: $input)
        }
    `
3-Exportar useRegisterMutation que retorna registerMutation, data, loading, error

4-En NotRegisteredUser dentro de la funcion que recibe el activateAuth crear la funcion onSubmit
    que recibe email y password, y que ejecuta la funcion registerMutation con el 
    parametro { variables: {input: {email, password}} }
    y una vez se ejecuta con exito con .then hacer la autentificacion.
5-Manejo de error, en NotRegisteredUser crear la const errorMsg que va a ser igual a, si error
    esta definido && mensaje de error,  y pasarla como prop a UserForm,
    en UserForm recibir la prop y que renderize el mensaje debajo del formulario

6-Manejo del Loading,en NotRegisteredUser pasar prop disabled={loading}, en UserForm recibir la prop y 
pasarselo al formulario, a los inputs y al button 
7-Añadir en styles opacity 0.3 cuando tenga la prop disabled

-------MUTACIONES PARA INICIAR SESION
1-Crear en containers>LoginMutation.js copiar el codigo de RegisterMutation.js que es similar y adaptarlo
2-Usarlo en NotRegisteredUser ahora haciendo un handleSubmit para cada caso 
3-Al traer los elementos data, loading, error, renombrarlos para indentificar los de cada uno
4-Pasar los mismos parametros que para el registro al Formulario de Login

------PERSISTIENDO DATOS EN SESSION STORAGE
1-En NotRegisteredUser en la funcion registerMutation despues que se ejecuta la mutacion en .then pasar 
    como parametro el "signup" que proviene de la "data" a activateAuth, dicho parametro es el token que se almacenara.
2-Hacer lo mismo en la funcion loginMutation pero ahora el parametro sera 'login' que es lo que llega de la data.
3-Ir a Context.js y en la funcion activateAuth recibir el token como parametro y almacenarlo con
    window.sessionStorage.setItem('token', token), con la key token y el valor token.
4-En donde se hace uso de useState en vez de un valor false inicial sera reemplazado por una funcion que obtiene
el item del sessionStorage con la key que en este caso es 'token'.
5-Mejorar codigo en NotRegisteredUser, importar useContext de react, *En Context exportar Context que ahora sera
    importado como { Context } en NotRegisteredUser
    const { activateAuth } = useContext(Context)
    Quitar el Context.consumer que envolvia a las funciones solo para pasar el activateAuth

-------HACER LIKE COMO USUARIO REGISTRADO 
1-En container ToggleLikeMutation quitar el anonymous 
2-En raiz index.js crear la conficuracion de la documentacion de autentificado de apollo
    https://www.apollographql.com/docs/react/networking/authentication/

    Donde primero se crea el httpLink que en este caso es el que estamos usando en vercel
    Despues la const authLink que usa el setContext el cual contiene la const token del sessionStorage
        y los headers con la authorization
    Finalmente la const client que en link: hace un authLink.concat(httpLink),
    y el cache contiene el new InMemoryCache()
4-En photoCard quitar el uso de localStorage porque interfiere con las peticiones, el setLiked
    Ahora el liked llega a traves de las props.
5-Expiracion del token, en const client capturar el error
    const { networkError } = error
        if(networkError && networkError.result.code === 'invalid_token') {
        window.sessionStorage.removeItem('token')
        window.location.href = '/'
    } 



-------MOSTRAR FAVORITOS Y SOLUCIONAR FETCH POLICY
1-En containers crear GetFavorites.js crear la const GET-FAVS usando gql 
3-Crear la const GetFavorites que retorna un mapeo de los favs y que devuelve la imagen con el src que viene de
    fav 
3-Separar la parte del mapeo en un componente nuevo llamado ListOfFavs crear un index.js para ello
    este nuevo componente recibe el objeto favs que por default es un array vacio
4-Solucionar que cuando das click a un favorito al ir a favs este no se actualiza debido a que apollo muestran
    lo que esta en el caché, esto se hace yendo a al useQuery y añadir { fetchPolicy: 'cache-and-network' }


--------CERRAR SESION
1-En Context.js tambien se tiene que hacer un metodo contrario de autenticar, sera llamado removeAuth
2-En pages User.js usar removeAuth en el onClick trayendolo con useContext y pasandole el Context
3-Dar estilos al boton reutilizando el boton del formulario, crear en components> SubmitButton > index.js
    y usarlo tanto en el form como en user

--------RETOQUES A PETGRAM, REDIRECT
1-En App.js importar useContext de react y encerrar en parentesis el Context
2-const { isAuth } = useContext(Context) y quitar el Consumer y envolver en llaves lo que queda
3-Simplifica aun mas, en el Router principal crear 
    {!isAuth && <NotRegisteredUser path='/login' />}
    <Favs path='/favs' />
    <User path='/user' />
    Y borrar lo que habiamos dejado en la llave
4-Para evitar que alguien que no este autentificado acceda a las rutas de favs y user usar un Redirect que importamos
    de reach/router para cada ruta, añadir propiedad noThrow para evitar el error en consola.
5-Añadir pagina si la ruta no existe, crear una nueva pagina llamada NotFound.js que renderiza mensaje esta pagina no 
    existe.
6-En App.js, en el Router usarlo como primera ruta <NotFound default />
7-Corregir error que al querer iniciar sesion con la ruta /login muestra error que pagina no existe:
    

--------REACT HELMET
1-Intalar dependencia npm install react-helmet
2-En Home.js usar Helmet y poner dentro la etiqueta title y meta 
3-Hacer lo mismo para Favs
4-Crear componente Layout que devuelve Helmet y un div con title, subtitle y el children

--------PERFORMANCE, REACT MEMO 
1-En consola 
    ./node_modules/.bin/webpack --mode "development"
    npx serve dist -s

2-Ir a en browser a pestana performance y al recargar podemos ver el desempeno de la app, cuanto ha tardado en renderizar
    en milisegundos cada componente o pagina 
3-Ir a pestana Profile del browser con ayuda de la extension react developer tools, donde se puede grabar cual es el coste
    de los componentes y si algun componente se esta renderizando inecesariamente, en esta caso ListOfCategories lo
    esta haciendo inecesariamente.
4-En ListOfCategories index.js renombrar a ListOfCategoriesComponent y exportar const ListOfCategories que sera React.memo 
    envolviendo al componente renombrado.
    "serve:dev": "webpack --mode 'development' && npx serve dist -s --open"    para ejecutar de una los comandos
    y ahora ListOfCategories ya no se renderizara inecesariamente.
5-La Home tambien se esta renderizando de nuevo para evitarlo:
    En pages> Home exportar la funcion Home pero con React.memo y como segundo parametro pasermos una funcion que recibe
    las prevProvs y props, y hace un return de las props.id si son ===


--------REACT LAZY, SUSPENSE
1-En App.js vamos a cargar favoritos solo cuando lo necesitemos, crear la const Favs que usara React.lazy que contendra un
    import dinamico, usar Suspense en el return que envuelva todo y agragarle propiedad falllback que por ahora renderiza 
    un div, Hacer un export default de Favs.
2-Como saber que si esta funcionando el lazy, ir a consola >network>js 
* Una acotación importante es que React.lazy y Suspense solo funcionan en Client Side Rendering. Si su aplicación usa Server
 Side Rendering deberán usar loadable-components https://reactjs.org/docs/code-splitting.html#reactlazy


--------VALIDANDO TIPOS DE DATOS, PropTypes 
1- npm install prop-types
2-En FavButton crear const 

    FavButton.propTypes = {
        liked: PropTypes.bool.isRequired,
        likes: PropTypes.number.isRequired,
        onClick: PropTypes.func.isRequired
    } 

    y en Photocard donde se usa el FavButton cambiar la prop liked y ver en consola el error que marca.
    Añadir isRequired para establecer que es prop es necesaria.
3-En ListOFavs haceer lo mismo

    ListOfFavs.propTypes = {
        favs: PropTypes.arrayOf(
        PropTypes.shape({
            id: PropTypes.string.isRequired,
            src: PropTypes.string.isRequired
        })
        )
    }

4-En SubmitButton, anadir las PropTypes en la de children sera del tipo node
5-En PhotoCard hacer lo mismo pero en este caso para likes hacer una custom prop validation con una funcion
    que recibe como parametros props, propName, compoenentName,
    crear const propValue = props[propName]
    hacer un condicional si la propValue undefined retornar un new error
    lo mismo para propValue < 0
  


--------PWA MANIFEST
1-Correr en forma de desarrollo a Petgram e ir a consola en lighhouse para ver los puntos faltantes para ser PWA
2-En index.html en el body debajo del div crear la etiqueta <noscript>
3-npm install webpack-pwa-manifest -D
4-En webpack.config
    const WebpackPwaManifestPlugin = require('webpack-pwa-manifest')
    En la seccion de plugins anadir new WebpackPwaManifestPlugin con la configuracion correspondiente y anadir
    el icon.
--------PWA SERVICE WORKER - SOPORTE OFFLINE
1-const WorkboxWebpackPlugin = require('workbox-webpack-plugin')
2-new WorkboxWebpackPlugin.GenerateSW y anadir configuracion 
3-En index.html registrar el sw.
4-maximumFileSizeToCacheInBytes: 5000000, en WorkboxWebpackPlugin
5-En webpack config
        {
          src: path.resolve('src/assets/maskable-icon.png'),
          size: '1024x1024',
          purpose: 'maskable'
        },
index.js > head

<link rel="apple-touch-icon" href="/src/assets/icons/ios-icon.png" />


---------TESTING
1-Hacer deploy de nuevo con vercel, 